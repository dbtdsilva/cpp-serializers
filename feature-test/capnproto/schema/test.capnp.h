// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: test.capnp

#ifndef CAPNP_INCLUDED_e1e66843d9fb6aa1_
#define CAPNP_INCLUDED_e1e66843d9fb6aa1_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(eae6cde4444d7ed7);
CAPNP_DECLARE_SCHEMA(b05651a0a8d7c46c);
CAPNP_DECLARE_SCHEMA(fffee197a187b039);
CAPNP_DECLARE_SCHEMA(f9804b6fc5c65f91);
CAPNP_DECLARE_SCHEMA(cc069895e013eae2);

}  // namespace schemas
}  // namespace capnp


struct Record {
  Record() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eae6cde4444d7ed7, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RecordMissing {
  RecordMissing() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b05651a0a8d7c46c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RecordNewField {
  RecordNewField() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fffee197a187b039, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RecordRename {
  RecordRename() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f9804b6fc5c65f91, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct RecordTypeInheritance {
  RecordTypeInheritance() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc069895e013eae2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Record::Reader {
public:
  typedef Record Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIds() const;
  inline  ::capnp::List< ::int64_t>::Reader getIds() const;

  inline bool hasStrings() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getStrings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Record::Builder {
public:
  typedef Record Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIds();
  inline  ::capnp::List< ::int64_t>::Builder getIds();
  inline void setIds( ::capnp::List< ::int64_t>::Reader value);
  inline void setIds(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initIds(unsigned int size);
  inline void adoptIds(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownIds();

  inline bool hasStrings();
  inline  ::capnp::List< ::capnp::Text>::Builder getStrings();
  inline void setStrings( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initStrings(unsigned int size);
  inline void adoptStrings(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownStrings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Record::Pipeline {
public:
  typedef Record Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RecordMissing::Reader {
public:
  typedef RecordMissing Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasStrings() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getStrings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RecordMissing::Builder {
public:
  typedef RecordMissing Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStrings();
  inline  ::capnp::List< ::capnp::Text>::Builder getStrings();
  inline void setStrings( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initStrings(unsigned int size);
  inline void adoptStrings(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownStrings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RecordMissing::Pipeline {
public:
  typedef RecordMissing Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RecordNewField::Reader {
public:
  typedef RecordNewField Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIds() const;
  inline  ::capnp::List< ::int64_t>::Reader getIds() const;

  inline bool hasStrings() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getStrings() const;

  inline  ::int64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RecordNewField::Builder {
public:
  typedef RecordNewField Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIds();
  inline  ::capnp::List< ::int64_t>::Builder getIds();
  inline void setIds( ::capnp::List< ::int64_t>::Reader value);
  inline void setIds(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initIds(unsigned int size);
  inline void adoptIds(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownIds();

  inline bool hasStrings();
  inline  ::capnp::List< ::capnp::Text>::Builder getStrings();
  inline void setStrings( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initStrings(unsigned int size);
  inline void adoptStrings(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownStrings();

  inline  ::int64_t getId();
  inline void setId( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RecordNewField::Pipeline {
public:
  typedef RecordNewField Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RecordRename::Reader {
public:
  typedef RecordRename Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIdsrem() const;
  inline  ::capnp::List< ::int64_t>::Reader getIdsrem() const;

  inline bool hasStringsrem() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getStringsrem() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RecordRename::Builder {
public:
  typedef RecordRename Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIdsrem();
  inline  ::capnp::List< ::int64_t>::Builder getIdsrem();
  inline void setIdsrem( ::capnp::List< ::int64_t>::Reader value);
  inline void setIdsrem(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t>::Builder initIdsrem(unsigned int size);
  inline void adoptIdsrem(::capnp::Orphan< ::capnp::List< ::int64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t>> disownIdsrem();

  inline bool hasStringsrem();
  inline  ::capnp::List< ::capnp::Text>::Builder getStringsrem();
  inline void setStringsrem( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setStringsrem(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initStringsrem(unsigned int size);
  inline void adoptStringsrem(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownStringsrem();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RecordRename::Pipeline {
public:
  typedef RecordRename Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RecordTypeInheritance::Reader {
public:
  typedef RecordTypeInheritance Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasIds() const;
  inline  ::capnp::List<double>::Reader getIds() const;

  inline bool hasStrings() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getStrings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RecordTypeInheritance::Builder {
public:
  typedef RecordTypeInheritance Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIds();
  inline  ::capnp::List<double>::Builder getIds();
  inline void setIds( ::capnp::List<double>::Reader value);
  inline void setIds(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double>::Builder initIds(unsigned int size);
  inline void adoptIds(::capnp::Orphan< ::capnp::List<double>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double>> disownIds();

  inline bool hasStrings();
  inline  ::capnp::List< ::capnp::Text>::Builder getStrings();
  inline void setStrings( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initStrings(unsigned int size);
  inline void adoptStrings(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownStrings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RecordTypeInheritance::Pipeline {
public:
  typedef RecordTypeInheritance Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Record::Reader::hasIds() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Record::Builder::hasIds() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t>::Reader Record::Reader::getIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t>::Builder Record::Builder::getIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Record::Builder::setIds( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Record::Builder::setIds(::kj::ArrayPtr<const  ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t>::Builder Record::Builder::initIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Record::Builder::adoptIds(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> Record::Builder::disownIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Record::Reader::hasStrings() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Record::Builder::hasStrings() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader Record::Reader::getStrings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder Record::Builder::getStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Record::Builder::setStrings( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Record::Builder::setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder Record::Builder::initStrings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Record::Builder::adoptStrings(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> Record::Builder::disownStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RecordMissing::Reader::hasStrings() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RecordMissing::Builder::hasStrings() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader RecordMissing::Reader::getStrings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordMissing::Builder::getStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RecordMissing::Builder::setStrings( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void RecordMissing::Builder::setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordMissing::Builder::initStrings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RecordMissing::Builder::adoptStrings(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> RecordMissing::Builder::disownStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RecordNewField::Reader::hasIds() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RecordNewField::Builder::hasIds() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t>::Reader RecordNewField::Reader::getIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t>::Builder RecordNewField::Builder::getIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RecordNewField::Builder::setIds( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void RecordNewField::Builder::setIds(::kj::ArrayPtr<const  ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t>::Builder RecordNewField::Builder::initIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RecordNewField::Builder::adoptIds(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> RecordNewField::Builder::disownIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RecordNewField::Reader::hasStrings() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RecordNewField::Builder::hasStrings() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader RecordNewField::Reader::getStrings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordNewField::Builder::getStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RecordNewField::Builder::setStrings( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void RecordNewField::Builder::setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordNewField::Builder::initStrings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void RecordNewField::Builder::adoptStrings(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> RecordNewField::Builder::disownStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int64_t RecordNewField::Reader::getId() const {
  return _reader.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int64_t RecordNewField::Builder::getId() {
  return _builder.getDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void RecordNewField::Builder::setId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool RecordRename::Reader::hasIdsrem() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RecordRename::Builder::hasIdsrem() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t>::Reader RecordRename::Reader::getIdsrem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t>::Builder RecordRename::Builder::getIdsrem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RecordRename::Builder::setIdsrem( ::capnp::List< ::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void RecordRename::Builder::setIdsrem(::kj::ArrayPtr<const  ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t>::Builder RecordRename::Builder::initIdsrem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RecordRename::Builder::adoptIdsrem(
    ::capnp::Orphan< ::capnp::List< ::int64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t>> RecordRename::Builder::disownIdsrem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RecordRename::Reader::hasStringsrem() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RecordRename::Builder::hasStringsrem() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader RecordRename::Reader::getStringsrem() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordRename::Builder::getStringsrem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RecordRename::Builder::setStringsrem( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void RecordRename::Builder::setStringsrem(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordRename::Builder::initStringsrem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void RecordRename::Builder::adoptStringsrem(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> RecordRename::Builder::disownStringsrem() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool RecordTypeInheritance::Reader::hasIds() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool RecordTypeInheritance::Builder::hasIds() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double>::Reader RecordTypeInheritance::Reader::getIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<double>::Builder RecordTypeInheritance::Builder::getIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void RecordTypeInheritance::Builder::setIds( ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void RecordTypeInheritance::Builder::setIds(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double>::Builder RecordTypeInheritance::Builder::initIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void RecordTypeInheritance::Builder::adoptIds(
    ::capnp::Orphan< ::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double>> RecordTypeInheritance::Builder::disownIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool RecordTypeInheritance::Reader::hasStrings() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool RecordTypeInheritance::Builder::hasStrings() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader RecordTypeInheritance::Reader::getStrings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordTypeInheritance::Builder::getStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void RecordTypeInheritance::Builder::setStrings( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void RecordTypeInheritance::Builder::setStrings(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder RecordTypeInheritance::Builder::initStrings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void RecordTypeInheritance::Builder::adoptStrings(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> RecordTypeInheritance::Builder::disownStrings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_e1e66843d9fb6aa1_
