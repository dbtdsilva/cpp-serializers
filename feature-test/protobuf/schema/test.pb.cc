// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test {

namespace {

const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record3_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  Record_descriptor_ = file->message_type(0);
  static const int Record_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, strings_),
  };
  Record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record_descriptor_,
      Record::internal_default_instance(),
      Record_offsets_,
      -1,
      -1,
      -1,
      sizeof(Record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_));
  Record2_descriptor_ = file->message_type(1);
  static const int Record2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record2, ids_),
  };
  Record2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record2_descriptor_,
      Record2::internal_default_instance(),
      Record2_offsets_,
      -1,
      -1,
      -1,
      sizeof(Record2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record2, _internal_metadata_));
  Record3_descriptor_ = file->message_type(2);
  static const int Record3_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record3, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record3, strings_),
  };
  Record3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record3_descriptor_,
      Record3::internal_default_instance(),
      Record3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Record3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record3, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record_descriptor_, Record::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record2_descriptor_, Record2::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record3_descriptor_, Record3::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  Record_default_instance_.Shutdown();
  delete Record_reflection_;
  Record2_default_instance_.Shutdown();
  delete Record2_reflection_;
  Record3_default_instance_.Shutdown();
  delete Record3_reflection_;
}

void protobuf_InitDefaults_test_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Record_default_instance_.DefaultConstruct();
  Record2_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Record3_default_instance_.DefaultConstruct();
  Record_default_instance_.get_mutable()->InitAsDefaultInstance();
  Record2_default_instance_.get_mutable()->InitAsDefaultInstance();
  Record3_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_test_2eproto_once_);
void protobuf_InitDefaults_test_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_test_2eproto_once_,
                 &protobuf_InitDefaults_test_2eproto_impl);
}
void protobuf_AddDesc_test_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_test_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\rprotobuf_test\"&\n\006Record\022\013\n"
    "\003ids\030\001 \003(\003\022\017\n\007strings\030\002 \003(\t\"\026\n\007Record2\022\013"
    "\n\003ids\030\001 \003(\003\"\'\n\007Record3\022\013\n\003ids\030\001 \003(\003\022\017\n\007s"
    "trings\030\002 \003(\tb\006proto3", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_test_2eproto_once_);
void protobuf_AddDesc_test_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_test_2eproto_once_,
                 &protobuf_AddDesc_test_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kIdsFieldNumber;
const int Record::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_test_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.Record)
}

void Record::SharedCtor() {
  _cached_size_ = 0;
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:protobuf_test.Record)
  SharedDtor();
}

void Record::SharedDtor() {
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  protobuf_InitDefaults_test_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Record> Record_default_instance_;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test.Record)
  ids_.Clear();
  strings_.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strings;
        break;
      }

      // repeated string strings = 2;
      case 2: {
        if (tag == 18) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strings(this->strings_size() - 1).data(),
            this->strings(this->strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf_test.Record.strings"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.Record)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // repeated string strings = 2;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf_test.Record.strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf_test.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.Record)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids(i), target);
  }

  // repeated string strings = 2;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf_test.Record.strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->strings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test.Record)
  size_t total_size = 0;

  // repeated int64 ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test.Record)
    UnsafeMergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test.Record)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Record::UnsafeMergeFrom(const Record& from) {
  GOOGLE_DCHECK(&from != this);
  ids_.UnsafeMergeFrom(from.ids_);
  strings_.UnsafeMergeFrom(from.strings_);
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test.Record)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  strings_.UnsafeArenaSwap(&other->strings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// repeated int64 ids = 1;
int Record::ids_size() const {
  return ids_.size();
}
void Record::clear_ids() {
  ids_.Clear();
}
::google::protobuf::int64 Record::ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record.ids)
  return ids_.Get(index);
}
void Record::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test.Record.ids)
}
void Record::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Record::ids() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Record::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record.ids)
  return &ids_;
}

// repeated string strings = 2;
int Record::strings_size() const {
  return strings_.size();
}
void Record::clear_strings() {
  strings_.Clear();
}
const ::std::string& Record::strings(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record.strings)
  return strings_.Get(index);
}
::std::string* Record::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test.Record.strings)
  return strings_.Mutable(index);
}
void Record::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_test.Record.strings)
  strings_.Mutable(index)->assign(value);
}
void Record::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Record.strings)
}
void Record::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Record.strings)
}
::std::string* Record::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_test.Record.strings)
  return strings_.Add();
}
void Record::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record.strings)
}
void Record::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test.Record.strings)
}
void Record::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test.Record.strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Record::strings() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record.strings)
  return strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Record::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record.strings)
  return &strings_;
}

inline const Record* Record::internal_default_instance() {
  return &Record_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record2::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record2::Record2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_test_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.Record2)
}

void Record2::InitAsDefaultInstance() {
}

Record2::Record2(const Record2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.Record2)
}

void Record2::SharedCtor() {
  _cached_size_ = 0;
}

Record2::~Record2() {
  // @@protoc_insertion_point(destructor:protobuf_test.Record2)
  SharedDtor();
}

void Record2::SharedDtor() {
}

void Record2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record2_descriptor_;
}

const Record2& Record2::default_instance() {
  protobuf_InitDefaults_test_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Record2> Record2_default_instance_;

Record2* Record2::New(::google::protobuf::Arena* arena) const {
  Record2* n = new Record2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test.Record2)
  ids_.Clear();
}

bool Record2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.Record2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.Record2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.Record2)
  return false;
#undef DO_
}

void Record2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.Record2)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf_test.Record2)
}

::google::protobuf::uint8* Record2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.Record2)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.Record2)
  return target;
}

size_t Record2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test.Record2)
  size_t total_size = 0;

  // repeated int64 ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test.Record2)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Record2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test.Record2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test.Record2)
    UnsafeMergeFrom(*source);
  }
}

void Record2::MergeFrom(const Record2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test.Record2)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Record2::UnsafeMergeFrom(const Record2& from) {
  GOOGLE_DCHECK(&from != this);
  ids_.UnsafeMergeFrom(from.ids_);
}

void Record2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test.Record2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record2::CopyFrom(const Record2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test.Record2)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Record2::IsInitialized() const {

  return true;
}

void Record2::Swap(Record2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record2::InternalSwap(Record2* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record2_descriptor_;
  metadata.reflection = Record2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record2

// repeated int64 ids = 1;
int Record2::ids_size() const {
  return ids_.size();
}
void Record2::clear_ids() {
  ids_.Clear();
}
::google::protobuf::int64 Record2::ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record2.ids)
  return ids_.Get(index);
}
void Record2::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test.Record2.ids)
}
void Record2::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record2.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Record2::ids() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record2.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Record2::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record2.ids)
  return &ids_;
}

inline const Record2* Record2::internal_default_instance() {
  return &Record2_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record3::kIdsFieldNumber;
const int Record3::kStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record3::Record3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_test_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_test.Record3)
}

void Record3::InitAsDefaultInstance() {
}

Record3::Record3(const Record3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_test.Record3)
}

void Record3::SharedCtor() {
  _cached_size_ = 0;
}

Record3::~Record3() {
  // @@protoc_insertion_point(destructor:protobuf_test.Record3)
  SharedDtor();
}

void Record3::SharedDtor() {
}

void Record3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record3_descriptor_;
}

const Record3& Record3::default_instance() {
  protobuf_InitDefaults_test_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Record3> Record3_default_instance_;

Record3* Record3::New(::google::protobuf::Arena* arena) const {
  Record3* n = new Record3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record3::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test.Record3)
  ids_.Clear();
  strings_.Clear();
}

bool Record3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf_test.Record3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strings;
        break;
      }

      // repeated string strings = 2;
      case 2: {
        if (tag == 18) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strings(this->strings_size() - 1).data(),
            this->strings(this->strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protobuf_test.Record3.strings"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_test.Record3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_test.Record3)
  return false;
#undef DO_
}

void Record3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_test.Record3)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // repeated string strings = 2;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf_test.Record3.strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protobuf_test.Record3)
}

::google::protobuf::uint8* Record3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test.Record3)
  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids(i), target);
  }

  // repeated string strings = 2;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protobuf_test.Record3.strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->strings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test.Record3)
  return target;
}

size_t Record3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test.Record3)
  size_t total_size = 0;

  // repeated int64 ids = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strings_size());
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_test.Record3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Record3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_test.Record3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_test.Record3)
    UnsafeMergeFrom(*source);
  }
}

void Record3::MergeFrom(const Record3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test.Record3)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Record3::UnsafeMergeFrom(const Record3& from) {
  GOOGLE_DCHECK(&from != this);
  ids_.UnsafeMergeFrom(from.ids_);
  strings_.UnsafeMergeFrom(from.strings_);
}

void Record3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_test.Record3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record3::CopyFrom(const Record3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test.Record3)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Record3::IsInitialized() const {

  return true;
}

void Record3::Swap(Record3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record3::InternalSwap(Record3* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  strings_.UnsafeArenaSwap(&other->strings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record3_descriptor_;
  metadata.reflection = Record3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record3

// repeated int64 ids = 1;
int Record3::ids_size() const {
  return ids_.size();
}
void Record3::clear_ids() {
  ids_.Clear();
}
::google::protobuf::int64 Record3::ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record3.ids)
  return ids_.Get(index);
}
void Record3::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test.Record3.ids)
}
void Record3::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record3.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Record3::ids() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record3.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Record3::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record3.ids)
  return &ids_;
}

// repeated string strings = 2;
int Record3::strings_size() const {
  return strings_.size();
}
void Record3::clear_strings() {
  strings_.Clear();
}
const ::std::string& Record3::strings(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record3.strings)
  return strings_.Get(index);
}
::std::string* Record3::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test.Record3.strings)
  return strings_.Mutable(index);
}
void Record3::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_test.Record3.strings)
  strings_.Mutable(index)->assign(value);
}
void Record3::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Record3.strings)
}
void Record3::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Record3.strings)
}
::std::string* Record3::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_test.Record3.strings)
  return strings_.Add();
}
void Record3::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record3.strings)
}
void Record3::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test.Record3.strings)
}
void Record3::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test.Record3.strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Record3::strings() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record3.strings)
  return strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Record3::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record3.strings)
  return &strings_;
}

inline const Record3* Record3::internal_default_instance() {
  return &Record3_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_test

// @@protoc_insertion_point(global_scope)
