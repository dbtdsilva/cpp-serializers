/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift_test {

class Record;

class RecordMissing;

class RecordNewField;

class RecordRename;

class RecordTypes;


class Record {
 public:

  Record(const Record&);
  Record& operator=(const Record&);
  Record() {
  }

  virtual ~Record() throw();
  std::vector<int64_t>  ids;
  std::vector<std::string>  strings;

  void __set_ids(const std::vector<int64_t> & val);

  void __set_strings(const std::vector<std::string> & val);

  bool operator == (const Record & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    if (!(strings == rhs.strings))
      return false;
    return true;
  }
  bool operator != (const Record &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Record & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Record &a, Record &b);

inline std::ostream& operator<<(std::ostream& out, const Record& obj)
{
  obj.printTo(out);
  return out;
}


class RecordMissing {
 public:

  RecordMissing(const RecordMissing&);
  RecordMissing& operator=(const RecordMissing&);
  RecordMissing() {
  }

  virtual ~RecordMissing() throw();
  std::vector<int64_t>  ids;

  void __set_ids(const std::vector<int64_t> & val);

  bool operator == (const RecordMissing & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const RecordMissing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordMissing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RecordMissing &a, RecordMissing &b);

inline std::ostream& operator<<(std::ostream& out, const RecordMissing& obj)
{
  obj.printTo(out);
  return out;
}


class RecordNewField {
 public:

  RecordNewField(const RecordNewField&);
  RecordNewField& operator=(const RecordNewField&);
  RecordNewField() : id(0) {
  }

  virtual ~RecordNewField() throw();
  std::vector<int64_t>  ids;
  std::vector<std::string>  strings;
  int64_t id;

  void __set_ids(const std::vector<int64_t> & val);

  void __set_strings(const std::vector<std::string> & val);

  void __set_id(const int64_t val);

  bool operator == (const RecordNewField & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    if (!(strings == rhs.strings))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RecordNewField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordNewField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RecordNewField &a, RecordNewField &b);

inline std::ostream& operator<<(std::ostream& out, const RecordNewField& obj)
{
  obj.printTo(out);
  return out;
}


class RecordRename {
 public:

  RecordRename(const RecordRename&);
  RecordRename& operator=(const RecordRename&);
  RecordRename() {
  }

  virtual ~RecordRename() throw();
  std::vector<int64_t>  ids_rem;
  std::vector<std::string>  strings_rem;

  void __set_ids_rem(const std::vector<int64_t> & val);

  void __set_strings_rem(const std::vector<std::string> & val);

  bool operator == (const RecordRename & rhs) const
  {
    if (!(ids_rem == rhs.ids_rem))
      return false;
    if (!(strings_rem == rhs.strings_rem))
      return false;
    return true;
  }
  bool operator != (const RecordRename &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordRename & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RecordRename &a, RecordRename &b);

inline std::ostream& operator<<(std::ostream& out, const RecordRename& obj)
{
  obj.printTo(out);
  return out;
}


class RecordTypes {
 public:

  RecordTypes(const RecordTypes&);
  RecordTypes& operator=(const RecordTypes&);
  RecordTypes() {
  }

  virtual ~RecordTypes() throw();
  std::vector<double>  ids;
  std::vector<std::string>  strings;

  void __set_ids(const std::vector<double> & val);

  void __set_strings(const std::vector<std::string> & val);

  bool operator == (const RecordTypes & rhs) const
  {
    if (!(ids == rhs.ids))
      return false;
    if (!(strings == rhs.strings))
      return false;
    return true;
  }
  bool operator != (const RecordTypes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordTypes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RecordTypes &a, RecordTypes &b);

inline std::ostream& operator<<(std::ostream& out, const RecordTypes& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
